version: "3.8"

services:
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: backend_container
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - postgres
#    restart: on-failure
    environment:
      TZ: "Europe/Moscow"
    healthcheck:
      test: ["CMD", "curl", "http://backend:3000"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s


  postgres:
    build:
      context: postgres-db
      dockerfile: Dockerfile
    container_name: full_db_postgres
    volumes:
      - database_volume:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      TZ: "Europe/Moscow"
      POSTGRES_USERS: "${DB_USER_PROD}:${DB_PASSWORD_PROD}|${DB_USER_TEST}:${DB_PASSWORD_TEST}"
      POSTGRES_DATABASES: "${DB_NAME_PROD}:${DB_USER_PROD}|${DB_NAME_TEST}:${DB_USER_TEST}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_PROD} -d ${DB_NAME_PROD} && pg_isready -U ${DB_USER_TEST} -d ${DB_NAME_TEST}"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s


  pgadmin:
    hostname: pgadmin
    image: dpage/pgadmin4:latest
    restart: on-failure
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      TZ: "Europe/Moscow"
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy


  # reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      #      - database_volume
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf
    environment:
      - TZ=Europe/Moscow
    depends_on:
      - backend
      - postgres
      - dockerize
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:80/health"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s


  dockerize:
    image: jwilder/dockerize
    command: >
      -wait tcp://postgres:5432 -timeout 60s
      -wait tcp://pgadmin:80 -timeout 60s
    depends_on:
      - postgres
      - pgadmin


volumes:
  database_volume:
  pgadmin:
  backend:
